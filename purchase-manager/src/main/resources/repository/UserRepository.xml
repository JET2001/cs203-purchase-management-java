<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ticketpurchaseapp.purchase.repository.UserRepository">

    <resultMap id="userResultMap" type="com.ticketpurchaseapp.purchase.dto.User">
        <id column="user_id" property="id"/>
        <result column="mobile_number" property="mobile"/>
        <result column="email" property="email"/>
        <result column="password" property="password"/>
        <result column="authenticator_id" property="authenticatorId"/>
        <result column="is_verified" property="verified" />
    </resultMap>

    <select id="findUserByEmailAndMobile" resultMap="userResultMap" parameterType="map">
        SELECT user_id, mobile_number, email, authenticator_id, is_verified FROM user WHERE email = #{email} and mobile_number = #{mobile}
    </select>

    <select id="findUserByEmail" resultMap="userResultMap" parameterType="map">
        SELECT user_id, mobile_number, email, authenticator_id, is_verified FROM user WHERE email = #{email} and is_verified = 1
    </select>

    <resultMap id="userInfoResultMap" type="com.ticketpurchaseapp.purchase.dto.UserInfo">
        <id column="user_id" property="id"/>
        <result column="mobile_number" property="mobile"/>
        <result column="email" property="email"/>
        <result column="has_user_confirmed" property="isConfirmed"/>
        <result column="is_group_leader" property="isGroupLeader"/>
    </resultMap>
    
    <select id="getAllUserInfo" parameterType="map" resultMap="userInfoResultMap">
        SELECT u.user_id, u.mobile_number, u.email, c.has_user_confirmed, 
        (u.user_id = (SELECT group_leader FROM registration_group_for_event WHERE group_id = #{group_id}))
        AS is_group_leader
        FROM confirmation_group_for_event c 
        INNER JOIN user u 
        ON u.user_id = c.user_id
        WHERE c.group_id=#{group_id}
    </select>

    <resultMap id="userAuthResultMap" type="com.ticketpurchaseapp.purchase.dto.UserAuth">
        <result column="user_id" property = "userId"/>
        <result column="password" property="password"/>
        <result column="allow_login" property="allowLogin"/>
    </resultMap>

    <resultMap id = "queueResultMap" type = "com.ticketpurchaseapp.purchase.dto.Queue">
        <result column = "queue_id" property = "queueId" />
        <result column = "queue_start_datetime" property = "startDateTime"/>
        <result column = "queue_end_datetime" property = "endDateTime"/>
    </resultMap>

    <select id="retrieveUserForAuth" resultMap="userAuthResultMap" parameterType="map">
        SELECT password, allow_login, user_id FROM user
        WHERE email = #{email} and mobile_number = #{mobile}
    </select>

    <insert id="recordLoginFailed" parameterType="map">
        INSERT INTO login_record (ip_address, datetime_recorded, success) VALUES (#{ip_address}, #{datetime_recorded}, 0)
    </insert>

    <select id="isLoginLocked" parameterType="map" resultType="boolean">
        SELECT
        CASE
            WHEN COUNT(*) > 3 THEN TRUE
            ELSE FALSE
        END
        FROM login_record
        WHERE ip_address = #{ip_address} AND datetime_recorded > #{datetime_recorded}
    </select>

    <delete id="removeExpiredLoginRecords" parameterType="map">
        DELETE FROM login_record WHERE #{datetime_recorded} > datetime_recorded AND success = 0
    </delete>

    <!-- hasGroupRegisteredQueues --> 

    <select id="hasGroupRegisteredForThisQueue" parameterType="map" resultType="boolean">
        SELECT
        CASE
            WHEN COUNT(*) > 0 THEN TRUE
            ELSE FALSE
        END
        FROM registration_group_for_queue
        WHERE group_id = #{group_id} AND queue_id = #{queue_id} AND event_id = #{event_id}
    </select>

    <!-- isUserInGroup --> 

    <select id="isUserInGroup" parameterType = "map" resultType = "boolean">
        SELECT
        CASE
            WHEN COUNT(*) > 0 THEN TRUE
            ELSE FALSE
        END
        FROM confirmation_group_for_event 
        WHERE user_id = #{user_id} AND group_id = #{group_id}
    </select>    

    <!-- isQueueStillOnGoing --> 

    <select id="isQueueStillOnGoing" parameterType = "map" resultType = "boolean">
        SELECT 
        CASE
            WHEN COUNT(*) > 0 THEN TRUE
            ELSE FALSE
        END
        FROM queue
        WHERE queue_id = #{queue_id}
        AND queue_end_datetime > DATE_ADD(NOW(), INTERVAL 8 HOUR)
    </select>

    <!-- recordLoginSuccess --> 

    <select id="recordLoginSuccess" parameterType = "map">
        INSERT INTO login_record (ip_address, datetime_recorded, group_id, user_id, success) VALUES (#{ip_address}, #{datetime_recorded}, #{group_id}, #{user_id}, 1)
    </select>

    <!-- isAnyGroupMemberSuccessful --> 

    <select id="getQueueingGroupMember" parameterType = "map" resultType = "java.lang.String">
        SELECT user_id
        FROM login_record
        WHERE group_id = #{group_id} 
        AND success = 1
    </select>  
</mapper>